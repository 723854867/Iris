package com.busap.vcs.constants;

/**
 * 异常原因枚举类
 * 
 * @author 陈杰
 * 
 */
public enum ResponseCode {
	CODE_200,CODE_201,CODE_202,CODE_203,CODE_204, CODE_301, CODE_302, CODE_303, CODE_304, CODE_305, CODE_306, CODE_307, CODE_308, CODE_309, CODE_310,CODE_311,CODE_312,CODE_313,CODE_314,CODE_315,CODE_316,CODE_317,CODE_318,CODE_319,CODE_320,CODE_321,CODE_322,CODE_323,CODE_324,CODE_325,CODE_326,CODE_327,CODE_328,CODE_329,CODE_330,CODE_331,CODE_332,CODE_333,CODE_334,CODE_335,CODE_336,CODE_337,CODE_338,CODE_339,CODE_340,CODE_341,CODE_342,CODE_343,CODE_344,CODE_345,CODE_346,CODE_347,CODE_348,CODE_349,CODE_350,CODE_351,CODE_352,CODE_353,CODE_450,CODE_451,CODE_452,CODE_453,CODE_454,CODE_455,CODE_456,CODE_457,CODE_458,CODE_500,CODE_601,CODE_602,CODE_603,CODE_604,CODE_605,CODE_606,CODE_607,CODE_608,CODE_609,CODE_610,CODE_611,CODE_612,CODE_613,CODE_614,CODE_615,CODE_616,CODE_617,CODE_618,CODE_619,CODE_620,CODE_621,CODE_622;

	public String toString() {
		switch (this) {
		case CODE_200:
			return "成功";
		case CODE_201:
			return "已经赞过了哦~~~";
		case CODE_202:
			return "已经收藏过了哦~~~";
		case CODE_203:
			return "生成设备唯一标识失败";
		case CODE_204:
			return "用户id与设备唯一标识绑定失败";
		case CODE_301:
			return "该手机号码已被注册";
		case CODE_302:
			return "该手机号码未注册";	
		case CODE_303:
			return "验证码错误";
		case CODE_304:
			return "登录认证码失效";
		case CODE_305:
			return "该用户不存在";
		case CODE_306:
			return "该好友不存在";	
		case CODE_307:
			return "上传个人头像失败";	
		case CODE_308:
			return "上传个人背景图片失败";	
		case CODE_309:
			return "该操作必须是好友";
		case CODE_310:
			return "黑名单用户不能为空";	
		case CODE_311:
			return "重复关注";	
		case CODE_312:
			return "参数错误";	
		case CODE_313:
			return "消息已被删除";
		case CODE_314:
			return "认证码失效";	
		case CODE_315:
			return "该用户已关闭评论功能";
		case CODE_316:
			return "对方不允许添加好友";
		case CODE_317:
			return "重复添加黑名单";	
		case CODE_318:
			return "群组创建失败，您和其他用户非好友";
		case CODE_319:
			return "群组创建失败，您尚未添加好友";
		case CODE_320:
			return "群组创建失败，您在其他好友的麦信黑名单中";
		case CODE_321:
			return "登录密码错误";	
		case CODE_322:
			return "今天修改密码次数已达3次";	
		case CODE_323:
			return "今天找回密码次数已达3次,请明天再试";	
		case CODE_324:
			return "群不存在或您不是该群成员";
		case CODE_325:
			return "审核中";
		case CODE_326:
			return "审核未通过哦~~~";
		case CODE_327:
			return "您提交的内容包含敏感词汇";	
		case CODE_328:
			return "今天发送短信次数已达上限";	
		case CODE_329:
			return "请求已过期";	
		case CODE_330:
			return "手机号错误";		
		case CODE_331:
			return "文件上传失败";	
		case CODE_332:
			return "已经删除喽~~~";
		case CODE_333:
			return "重了，制作人最怕抄袭";
		case CODE_334:
			return "短信发送失败";
		case CODE_335:
			return "注册获取验证码已超3次，请明天再试";
		case CODE_336:
			return "找回密码获取验证码已超3次，请明天再试";
		case CODE_337:
			return "你还未赞过哦~~~";
		case CODE_338:
			return "你还未收藏过哦~~~";
		case CODE_339:
			return "你已经被禁言";	
		case CODE_340:
			return "你已经被禁号";	
		case CODE_341:
			return "不能关注自己";
		case CODE_342:
			return "已订阅该活动";
		case CODE_343:
			return "不能转发自己的视频";
		case CODE_344:
			return "您已转发过该视频";
		case CODE_345:
			return "转发的视频不存在";
		case CODE_346:
			return "上传直播封面失败";
		case CODE_347:
			return "您没有直播权限";
		case CODE_348:
			return "创建直播失败";
		case CODE_349:
			return "请完善主播认证信息";
		case CODE_350:
			return "主播认证信息有误";
		case CODE_351:
			return "该手机号已被绑定";
		case CODE_352:
			return "直播权限冻结";
		case CODE_353:
			return "今天的草莓已用光";
		case CODE_450:
			return "参数错误";	
		case CODE_451:
			return "用户不存在";
		case CODE_452:
			return "tokenid验证失败";
		case CODE_453:
			return "登录已过期";
		case CODE_454:
			return "您的麦克帐号已在其它地方登陆";	
		case CODE_455:
			return "属性验证失败";
		case CODE_456:
			return "新浪TOKEN为空";
		case CODE_457:
			return "审核失败，该视频已被用户删除！";
		case CODE_458:
			return "未开启位置信息，经纬度不存在！";
		case CODE_500:
			return "服务器内部错误";	
		case CODE_601:
			return "用户积分奖励已到上限5000";
		case CODE_602:
			return "积分记录不存在";
		case CODE_603:
			return "支付验证失败";
        case CODE_604:
            return "无效的请求";
        case CODE_605:
            return "API链接异常";
        case CODE_606:
            return "API端异常";
        case CODE_607:
            return "支付渠道参数有误";
        case CODE_608:
            return "服务器端异常，支付失败";
        case CODE_609:
            return "查询不到相关的订单信息";
		case CODE_610:
			return "已经加入黑名单了";
		case CODE_611:
			return "您已被拉黑，禁止评论";
		case CODE_612:
			return "您已被拉黑，禁止点赞";
		case CODE_613:
			return "您已被拉黑，禁止关注";
        case CODE_614:
            return "金豆数不足以兑换";
		case CODE_615:
			return "不能将自己加入黑名单";
		case CODE_616:
			return "黑名单用户不可提现";
        case CODE_617:
			return "每日提取金额已达上限";
        case CODE_618:
            return "商品已下架";
        case CODE_619:
			return "绑定失败！此账户已绑定在其他微信上！";
        case CODE_620:
            return "提现失败！请联系客服";
        case CODE_621:
            return "此微信号每日提现次数已达上限";
        case CODE_622:
			return "您还没有直播过，无法提现";
		default:
			return "成功";
		}
	}

	public int toCode() {
		switch (this) {
		case CODE_200:
			return 200;
		case CODE_201:
			return 201;
		case CODE_202:
			return 202;
		case CODE_203:
			return 203;
		case CODE_204:
			return 203;
		case CODE_301:
			return 301;
		case CODE_302:
			return 302;
		case CODE_303:
			return 303;
		case CODE_304:
			return 304;
		case CODE_305:
			return 305;	
		case CODE_306:
			return 306;	
		case CODE_307:
			return 307;	
		case CODE_308:
			return 308;	
		case CODE_309:
			return 309;	
		case CODE_310:
			return 310;	
		case CODE_311:
			return 311;
		case CODE_312:
			return 312;	
		case CODE_313:
			return 313;
		case CODE_314:
			return 314;	
		case CODE_315:
			return 315;
		case CODE_316:
			return 316;	
		case CODE_317:
			return 317;	
		case CODE_318:
			return 318;
		case CODE_319:
			return 319;
		case CODE_320:
			return 320;	
		case CODE_321:
			return 321;		
		case CODE_322:
			return 322;		
		case CODE_323:
			return 323;
		case CODE_324:
			return 324;
		case CODE_325:
			return 325;
		case CODE_326:
			return 326;
		case CODE_327:
			return 327;
		case CODE_328:
			return 328;
		case CODE_329:
			return 329;
		case CODE_330:
			return 330;
		case CODE_331:
			return 331;
		case CODE_332:
			return 332;
		case CODE_333:
			return 333;
		case CODE_334:
			return 334;
		case CODE_335:
			return 335;
		case CODE_336:
			return 336;
		case CODE_337:
			return 337;
		case CODE_338:
			return 338;
		case CODE_339:
			return 339;
		case CODE_340:
			return 340;
		case CODE_341:
			return 341;
		case CODE_342:
			return 342;
		case CODE_343:
			return 343;
		case CODE_344:
			return 344;
		case CODE_345:
			return 345;
		case CODE_346:
			return 346;
		case CODE_347:
			return 347;
		case CODE_348:
			return 348;
		case CODE_349:
			return 349;
		case CODE_350:
			return 350;
		case CODE_351:
			return 351;
		case CODE_352:
			return 352;
		case CODE_353:
			return 353;
		case CODE_450:
			return 450;	
		case CODE_451:
			return 451;	
		case CODE_452:
			return 452;	
		case CODE_453:
			return 453;	
		case CODE_454:
			return 454;	
		case CODE_455:
			return 455;	
		case CODE_456:
			return 456;
		case CODE_457:
			return 457;
		case CODE_458:
			return 458;
		case CODE_500:
			return 500;
		case CODE_601:
			return 601;
        case CODE_602:
            return 602;
        case CODE_603:
            return 603;
        case CODE_604:
            return 604;
        case CODE_605:
            return 605;
        case CODE_606:
            return 606;
        case CODE_607:
            return 607;
        case CODE_608:
            return 608;
        case CODE_609:
            return 609;
		case CODE_610:
			return 610;
		case CODE_611:
			return 611;
		case CODE_612:
			return 612;
		case CODE_613:
			return 613;
        case CODE_614:
            return 614;
		case CODE_615:
			return 615;
		case CODE_616:
			return 616;
        case CODE_617:
            return 617;
        case CODE_618:
            return 618;
        case CODE_619:
            return 619;
        case CODE_620:
            return 620;
        case CODE_621:
            return 621;
        case CODE_622:
			return 622;
		default:
			return 200;
		}
	}

}
